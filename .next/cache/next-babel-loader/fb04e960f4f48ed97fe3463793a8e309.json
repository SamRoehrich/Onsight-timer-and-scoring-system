{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Desktop/timer/next/components/Timer.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useRef } from 'react';\nimport RoundControl from './RoundControl';\n\nconst Timer = () => {\n  const {\n    0: minutes,\n    1: setMinutes\n  } = useState(1);\n  const {\n    0: seconds,\n    1: setSeconds\n  } = useState(0);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const roundStarted = useRef();\n  const {\n    0: cycles,\n    1: setCycles\n  } = useState(0);\n\n  function startRound() {\n    roundStarted.current = new Boolean(true);\n  }\n\n  function toggle() {\n    if (!isActive) {\n      if (roundStarted.current == undefined) {\n        startRound();\n      }\n    }\n\n    setIsActive(!isActive);\n  }\n\n  function timerReset() {\n    setMinutes(1);\n    setSeconds(0);\n    setCycles(cycles => cycles + 1);\n  } //timer control\n\n\n  useEffect(() => {\n    if (isActive) {\n      if (seconds == 0) {\n        if (minutes == 0) {\n          timerReset();\n        }\n\n        if (minutes > 0) {\n          setSeconds(10);\n          setMinutes(minutes - 1);\n        }\n      }\n\n      if (seconds > 0) {\n        setTimeout(() => setSeconds(seconds - 1), 1000);\n      }\n    }\n  }, [isActive, seconds, minutes]);\n  return __jsx(\"div\", {\n    className: \"timer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, minutes, \" : \", seconds < 10 ? `0${seconds}` : seconds), __jsx(\"button\", {\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, isActive ? 'Stop timer' : 'Start timer'));\n};\n\nexport default Timer;","map":{"version":3,"sources":["/Users/sam/Desktop/timer/next/components/Timer.jsx"],"names":["useState","useEffect","useRef","RoundControl","Timer","minutes","setMinutes","seconds","setSeconds","isActive","setIsActive","roundStarted","cycles","setCycles","startRound","current","Boolean","toggle","undefined","timerReset","setTimeout"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAEhB,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBN,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM;AAAA,OAACO,OAAD;AAAA,OAAUC;AAAV,MAAwBR,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM;AAAA,OAACS,QAAD;AAAA,OAAWC;AAAX,MAA0BV,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAMW,YAAY,GAAGT,MAAM,EAA3B;AACA,QAAM;AAAA,OAACU,MAAD;AAAA,OAASC;AAAT,MAAsBb,QAAQ,CAAC,CAAD,CAApC;;AAEA,WAASc,UAAT,GAAsB;AAClBH,IAAAA,YAAY,CAACI,OAAb,GAAuB,IAAIC,OAAJ,CAAY,IAAZ,CAAvB;AACH;;AAED,WAASC,MAAT,GAAkB;AACd,QAAG,CAACR,QAAJ,EAAc;AACV,UAAGE,YAAY,CAACI,OAAb,IAAwBG,SAA3B,EAAsC;AAClCJ,QAAAA,UAAU;AACb;AACJ;;AACDJ,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACH;;AAED,WAASU,UAAT,GAAsB;AAClBb,IAAAA,UAAU,CAAC,CAAD,CAAV;AACAE,IAAAA,UAAU,CAAC,CAAD,CAAV;AACAK,IAAAA,SAAS,CAACD,MAAM,IAAIA,MAAM,GAAG,CAApB,CAAT;AACH,GAzBe,CA2BhB;;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGQ,QAAH,EAAa;AACT,UAAGF,OAAO,IAAI,CAAd,EAAiB;AACb,YAAGF,OAAO,IAAI,CAAd,EAAiB;AACbc,UAAAA,UAAU;AACb;;AACD,YAAGd,OAAO,GAAG,CAAb,EAAgB;AACZG,UAAAA,UAAU,CAAC,EAAD,CAAV;AACAF,UAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AACH;AACJ;;AACD,UAAGE,OAAO,GAAG,CAAb,EAAgB;AACZa,QAAAA,UAAU,CAAC,MAAMZ,UAAU,CAACD,OAAO,GAAG,CAAX,CAAjB,EAAgC,IAAhC,CAAV;AACH;AACJ;AACJ,GAfQ,EAeN,CAACE,QAAD,EAAWF,OAAX,EAAoBF,OAApB,CAfM,CAAT;AAiBA,SACA;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,OAAL,SAAiBE,OAAO,GAAG,EAAV,GAAgB,IAAGA,OAAQ,EAA3B,GAA+BA,OAAhD,CADJ,EAEI;AAAQ,IAAA,OAAO,EAAEU,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BR,QAAQ,GAAG,YAAH,GAAkB,aAApD,CAFJ,CADA;AAMH,CAnDD;;AAqDA,eAAeL,KAAf","sourcesContent":["import { useState, useEffect, useRef } from 'react'\nimport RoundControl from './RoundControl'\n\nconst Timer = () => {\n\n    const [minutes, setMinutes] = useState(1)\n    const [seconds, setSeconds] = useState(0)\n    const [isActive, setIsActive] = useState(false)\n    const roundStarted = useRef()\n    const [cycles, setCycles] = useState(0)\n\n    function startRound() {\n        roundStarted.current = new Boolean(true);\n    }\n    \n    function toggle() {\n        if(!isActive) {\n            if(roundStarted.current == undefined) {\n                startRound()\n            }\n        }\n        setIsActive(!isActive)\n    }\n    \n    function timerReset() {\n        setMinutes(1)\n        setSeconds(0)\n        setCycles(cycles => cycles + 1)\n    }\n    \n    //timer control\n    useEffect(() => {\n        if(isActive) {\n            if(seconds == 0) {\n                if(minutes == 0) {\n                    timerReset()\n                }\n                if(minutes > 0) {\n                    setSeconds(10)\n                    setMinutes(minutes - 1)\n                }\n            }\n            if(seconds > 0) {\n                setTimeout(() => setSeconds(seconds - 1), 1000)\n            }\n        }\n    }, [isActive, seconds, minutes])\n\n    return (\n    <div className='timer'>\n        <h1>{minutes} : {seconds < 10 ? `0${seconds}` : seconds}</h1>\n        <button onClick={toggle}>{isActive ? 'Stop timer' : 'Start timer'}</button>\n    </div>\n    )\n}\n\nexport default Timer"]},"metadata":{},"sourceType":"module"}