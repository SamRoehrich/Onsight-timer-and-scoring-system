{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/sam/Desktop/timer/next/components/Timer.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useRef } from 'react';\nimport { useLocalState } from './LocalState';\nimport RoundControl from './Transition';\n\nvar Timer = function Timer() {\n  _s();\n\n  var _useState = useState(1),\n      minutes = _useState[0],\n      setMinutes = _useState[1];\n\n  var _useState2 = useState(0),\n      seconds = _useState2[0],\n      setSeconds = _useState2[1];\n\n  var _useState3 = useState(false),\n      isActive = _useState3[0],\n      setIsActive = _useState3[1];\n\n  var roundStarted = useRef();\n  var inIso = useRef();\n  var onDeck = useRef();\n  var climbing = useRef();\n  var finished = useRef();\n\n  var _useState4 = useState(0),\n      cycles = _useState4[0],\n      setCycles = _useState4[1];\n\n  var _useLocalState = useLocalState(),\n      athletes = _useLocalState.athletes; //updates climbers after they are done climbing 1 boulder\n\n\n  function updateClimbers(currentClimbing) {\n    var updatedClimbers = [];\n    var finishedIndex = 0;\n\n    var _loop = function _loop(i) {\n      if (currentClimbing[i].getLastBoulder() == true) {\n        setFinished(function (finished) {\n          return [].concat(_toConsumableArray(finished), [currentClimbing[i]]);\n        });\n        finsihedIndex = i;\n      } //update the boulders climbed value\n\n\n      currentClimbing[i].cycle();\n      updatedClimbers.push(currentClimbing[i]);\n    };\n\n    for (var i = 0; i < currentClimbing.length; i++) {\n      _loop(i);\n    } //remove finsihed climber from array\n\n\n    updatedClimbers.splice(finishedIndex, 1);\n    return updatedClimbers;\n  }\n\n  function cycleClimbers(nextClimber) {\n    //store current arrays\n    var currentOnDeck = onDeck;\n    var currentClimbing = climbing; //move on deck to climbing\n\n    currentOnDeck.map(function (climber) {\n      console.log(climber.name);\n\n      if (climber.getStartedClimbing == false) {\n        climber.setStartedClimbing();\n      }\n    });\n    setClimbing(function (currentOnDeck) {\n      return _toConsumableArray(currentOnDeck);\n    }); //move current climbers to ondeck\n\n    if (nextClimber) {\n      setOnDeck([nextClimber]);\n    } // const updatedClimbers = updateClimbers(currentClimbing)\n    // setOnDeck(onDeck => [...updatedClimbers, onDeck])\n\n  }\n\n  function getNextClimber() {\n    var currentIso = inIso;\n    var nextClimber = currentIso.shift();\n    setInIso(currentIso);\n    return nextClimber;\n  }\n\n  function startRound() {\n    roundStarted.current = new Boolean(true);\n    setInIso(_toConsumableArray(athletes));\n  }\n\n  function toggle() {\n    if (!isActive) {\n      if (roundStarted.current == undefined) {\n        startRound();\n      }\n    }\n\n    setIsActive(!isActive);\n  }\n\n  function timerReset() {\n    setMinutes(1);\n    setSeconds(0);\n    setCycles(function (cycles) {\n      return cycles + 1;\n    });\n  } //timer control\n\n\n  useEffect(function () {\n    if (isActive) {\n      if (seconds == 0) {\n        if (minutes == 0) {\n          timerReset();\n        }\n\n        if (minutes > 0) {\n          setSeconds(10);\n          setMinutes(minutes - 1);\n        }\n      }\n\n      if (seconds > 0) {\n        setTimeout(function () {\n          return setSeconds(seconds - 1);\n        }, 1000);\n      }\n    }\n  }, [isActive, seconds, minutes]); // useEffect(() => {\n  //     let nextClimber = getNextClimber()\n  //     cycleClimbers(nextClimber)\n  // }, [cycles])\n\n  return __jsx(\"div\", {\n    className: \"timer\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, minutes, \" : \", seconds < 10 ? \"0\".concat(seconds) : seconds), __jsx(\"button\", {\n    onClick: toggle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, isActive ? 'Stop timer' : 'Start timer'), __jsx(RoundControl, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }));\n};\n\n_s(Timer, \"HJ5L6sh5X2wkzsoCqG9CScmUlRc=\", false, function () {\n  return [useLocalState];\n});\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/Users/sam/Desktop/timer/next/components/Timer.jsx"],"names":["useState","useEffect","useRef","useLocalState","RoundControl","Timer","minutes","setMinutes","seconds","setSeconds","isActive","setIsActive","roundStarted","inIso","onDeck","climbing","finished","cycles","setCycles","athletes","updateClimbers","currentClimbing","updatedClimbers","finishedIndex","i","getLastBoulder","setFinished","finsihedIndex","cycle","push","length","splice","cycleClimbers","nextClimber","currentOnDeck","map","climber","console","log","name","getStartedClimbing","setStartedClimbing","setClimbing","setOnDeck","getNextClimber","currentIso","shift","setInIso","startRound","current","Boolean","toggle","undefined","timerReset","setTimeout"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from 'react'\nimport { useLocalState } from './LocalState'\nimport RoundControl from './Transition'\n\nconst Timer = () => {\n\n    const [minutes, setMinutes] = useState(1)\n    const [seconds, setSeconds] = useState(0)\n    const [isActive, setIsActive] = useState(false)\n    const roundStarted = useRef()\n    const inIso = useRef()\n    const onDeck = useRef()\n    const climbing = useRef()\n    const finished = useRef()\n    const [cycles, setCycles] = useState(0)\n    const { athletes,\n            // inIso, setInIso,\n            // onDeck, setOnDeck,\n            // climbing, setClimbing,\n            // finished, setFinished,   \n    } = useLocalState()\n\n    //updates climbers after they are done climbing 1 boulder\n    function updateClimbers(currentClimbing) {\n        const updatedClimbers = []\n        let finishedIndex = 0;\n        for(let i = 0; i < currentClimbing.length; i++) {\n            if(currentClimbing[i].getLastBoulder() == true) {\n                setFinished(finished => [...finished, currentClimbing[i]])\n                finsihedIndex = i\n            }  \n            //update the boulders climbed value\n            currentClimbing[i].cycle()\n            updatedClimbers.push(currentClimbing[i])\n        }\n        //remove finsihed climber from array\n        updatedClimbers.splice(finishedIndex, 1)\n        return updatedClimbers\n    }\n    \n    function cycleClimbers (nextClimber) {\n        //store current arrays\n        const currentOnDeck = onDeck;\n        const currentClimbing = climbing;\n        //move on deck to climbing\n        currentOnDeck.map((climber) => {\n            console.log(climber.name)\n            if(climber.getStartedClimbing == false) {\n                climber.setStartedClimbing()\n            }\n        })\n        setClimbing(currentOnDeck => [...currentOnDeck])\n        //move current climbers to ondeck\n        if(nextClimber) {\n            setOnDeck([nextClimber])\n        }\n        // const updatedClimbers = updateClimbers(currentClimbing)\n        // setOnDeck(onDeck => [...updatedClimbers, onDeck])\n    }\n\n    function getNextClimber() {\n        let currentIso = inIso\n        const nextClimber = currentIso.shift()\n        setInIso(currentIso)\n        return nextClimber\n    }\n    \n    \n    function startRound() {\n        roundStarted.current = new Boolean(true);\n        setInIso([...athletes])\n    }\n    \n    function toggle() {\n        if(!isActive) {\n            if(roundStarted.current == undefined) {\n                startRound()\n            }\n        }\n        setIsActive(!isActive)\n    }\n    \n    function timerReset() {\n        setMinutes(1)\n        setSeconds(0)\n        setCycles(cycles => cycles + 1)\n    }\n    \n    //timer control\n    useEffect(() => {\n        if(isActive) {\n            if(seconds == 0) {\n                if(minutes == 0) {\n                    timerReset()\n                }\n                if(minutes > 0) {\n                    setSeconds(10)\n                    setMinutes(minutes - 1)\n                }\n            }\n            if(seconds > 0) {\n                setTimeout(() => setSeconds(seconds - 1), 1000)\n            }\n        }\n    }, [isActive, seconds, minutes])\n    \n    // useEffect(() => {\n    //     let nextClimber = getNextClimber()\n    //     cycleClimbers(nextClimber)\n    // }, [cycles])\n\n    return (\n        <div className='timer'>\n        <h1>{minutes} : {seconds < 10 ? `0${seconds}` : seconds}</h1>\n        <button onClick={toggle}>{isActive ? 'Stop timer' : 'Start timer'}</button>\n        <RoundControl />\n    </div>\n    )\n}\n\nexport default Timer"]},"metadata":{},"sourceType":"module"}