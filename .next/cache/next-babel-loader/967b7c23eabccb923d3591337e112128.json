{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Desktop/timer/next/components/LocalState.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createContext, useState, useContext, useReducer } from 'react';\nconst LocalStateContext = createContext();\nconst LocalStateProvider = LocalStateContext.Provider;\nconst initialState = {\n  athletes: [],\n  inIso: [],\n  onDeck: [],\n  climbing: [],\n  finished: []\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"start-round\":\n      let athletes = action.payload;\n      athletes.forEach(athlete => athlete.inIso = true);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        athletes,\n        inIso: athletes\n      });\n\n    case 'remove-climber-from-iso':\n      let currentIso = [];\n      state.inIso.forEach(climber => currentIso.push(climber));\n      let nextClimber = currentIso.shift();\n      console.log(nextClimber);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        inIso: currentIso,\n        onDeck: [...state.onDeck, nextClimber]\n      });\n\n    case 'transition-climbers':\n      let currentClimbing = [];\n      let modifiedClimbing = [];\n      let currentOnDeck = [];\n      let currentFinished = state.finished;\n      currentIso = []; //fill temp arrays\n\n      state.climbing.forEach(climber => currentClimbing.push(climber));\n      state.onDeck.forEach(climber => currentOnDeck.push(climber));\n      state.inIso.forEach(climber => currentIso.push(climber)); //modify current climbers\n\n      currentClimbing.map(climber => climber.cycle());\n      currentClimbing.forEach(climber => {\n        if (climber.finsihed) {\n          currentFinished = [...currentFinished, climber];\n        } else {\n          modifiedClimbing.push(climber);\n        }\n      });\n      currentOnDeck.forEach(climber => {\n        climber.climbing = true;\n        climber.onDeck = false;\n      }); //get next climber\n\n      let next = currentIso.shift();\n\n      if (next !== undefined) {\n        next.setStartedClimbing();\n        modifiedClimbing = [...modifiedClimbing, next];\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        climbing: currentOnDeck,\n        onDeck: modifiedClimbing,\n        inIso: currentIso,\n        finished: currentFinished\n      });\n\n    case 'reset':\n      state = initialState;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        athletes: action.payload,\n        inIso: action.payload\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction LocalState({\n  children\n}) {\n  const {\n    0: roundInformation,\n    1: setRoundInformation\n  } = useState({});\n  const {\n    0: athletes,\n    1: setAthletes\n  } = useState([]);\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, initialState);\n\n  function setLocalStateRoundInformation(roundInfo) {\n    setRoundInformation(roundInfo);\n  }\n\n  const defaultValues = {\n    roundInformation,\n    setLocalStateRoundInformation,\n    athletes,\n    setAthletes,\n    reducerState: state,\n    dispatch\n  };\n  return __jsx(LocalStateProvider, {\n    value: defaultValues,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 12\n    }\n  }, children);\n}\n\nfunction useLocalState() {\n  const all = useContext(LocalStateContext);\n  return all;\n}\n\nexport { LocalState, LocalStateContext, useLocalState };","map":{"version":3,"sources":["/Users/sam/Desktop/timer/next/components/LocalState.js"],"names":["createContext","useState","useContext","useReducer","LocalStateContext","LocalStateProvider","Provider","initialState","athletes","inIso","onDeck","climbing","finished","reducer","state","action","type","payload","forEach","athlete","currentIso","climber","push","nextClimber","shift","console","log","currentClimbing","modifiedClimbing","currentOnDeck","currentFinished","map","cycle","finsihed","next","undefined","setStartedClimbing","LocalState","children","roundInformation","setRoundInformation","setAthletes","dispatch","setLocalStateRoundInformation","roundInfo","defaultValues","reducerState","useLocalState","all"],"mappings":"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","sourcesContent":["import { createContext, useState, useContext, useReducer } from 'react'\n\nconst LocalStateContext = createContext()\n\nconst LocalStateProvider = LocalStateContext.Provider\n\nconst initialState = {\n    athletes: [],\n    inIso: [],\n    onDeck: [],\n    climbing: [],\n    finished: [],\n}\n\nfunction reducer(state, action) {\n    switch(action.type) {\n        case \"start-round\":\n            let athletes = action.payload\n            athletes.forEach(athlete => athlete.inIso = true)\n            return { ...state, athletes, inIso: athletes};\n        case 'remove-climber-from-iso':\n            let currentIso = []\n            state.inIso.forEach(climber => currentIso.push(climber))\n            let nextClimber = currentIso.shift()\n            console.log(nextClimber)\n            return {\n                ...state,\n                inIso: currentIso,\n                onDeck: [...state.onDeck, nextClimber]\n            };\n        case 'transition-climbers':\n            let currentClimbing = []\n            let modifiedClimbing = []\n            let currentOnDeck = []\n            let currentFinished = state.finished\n            currentIso = []\n            //fill temp arrays\n            state.climbing.forEach(climber => currentClimbing.push(climber))\n            state.onDeck.forEach(climber => currentOnDeck.push(climber))\n            state.inIso.forEach(climber => currentIso.push(climber))\n            //modify current climbers\n            currentClimbing.map(climber => climber.cycle())\n            currentClimbing.forEach(climber => {\n                if(climber.finsihed) {\n                    currentFinished = [...currentFinished, climber]\n                } else {\n                    modifiedClimbing.push(climber)\n                }\n            })\n            currentOnDeck.forEach(climber => {\n                climber.climbing = true;\n                climber.onDeck = false;\n            })\n            //get next climber\n            let next = currentIso.shift()\n            if(next !== undefined) {\n                next.setStartedClimbing()\n                modifiedClimbing = [...modifiedClimbing, next]\n            }\n            return {\n                ...state,\n                climbing: currentOnDeck,\n                onDeck: modifiedClimbing,\n                inIso: currentIso,\n                finished: currentFinished\n            };\n        case 'reset':\n            state = initialState\n            return {\n                ...state,\n                athletes: action.payload,\n                inIso: action.payload\n            }\n        default: \n            return state;\n    }\n}\n\nfunction LocalState({children}) {\n    const [roundInformation, setRoundInformation] = useState({})\n    const [athletes, setAthletes] = useState([])\n    const [state, dispatch] = useReducer(reducer, initialState)\n\n    function setLocalStateRoundInformation(roundInfo) {\n        setRoundInformation(roundInfo)\n    }\n\n    const defaultValues = {\n        roundInformation, setLocalStateRoundInformation,\n        athletes, setAthletes,\n        reducerState: state,\n        dispatch\n    }\n\n    return <LocalStateProvider value={defaultValues}>\n                {children}\n            </LocalStateProvider>\n}\n\nfunction useLocalState() {\n    const all = useContext(LocalStateContext)\n    return all\n}\n\nexport { LocalState, LocalStateContext, useLocalState }"]},"metadata":{},"sourceType":"module"}