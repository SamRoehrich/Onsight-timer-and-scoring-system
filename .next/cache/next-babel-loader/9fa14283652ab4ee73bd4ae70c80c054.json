{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Desktop/timer/next/components/Timer.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useRef } from 'react';\nimport { useLocalState } from './LocalState';\n\nconst Timer = () => {\n  const {\n    0: minutes,\n    1: setMinutes\n  } = useState(1);\n  const {\n    0: seconds,\n    1: setSeconds\n  } = useState(0);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const roundStarted = useRef();\n  const {\n    0: cycles,\n    1: setCycles\n  } = useState(0);\n  const {\n    athletes,\n    inIso,\n    setInIso,\n    onDeck,\n    setOnDeck,\n    climbing,\n    setClimbing,\n    finished,\n    setFinished\n  } = useLocalState(); //updates climbers after they are done climbing 1 boulder\n\n  function updateClimbers(currentClimbing) {\n    const updatedClimbers = [];\n    let finishedIndex = 0;\n\n    for (let i = 0; i < currentClimbing.length; i++) {\n      if (currentClimbing[i].getLastBoulder() == true) {\n        setFinished(finished => [...finished, currentClimbing[i]]);\n        finsihedIndex = i;\n      } //update the boulders climbed value\n\n\n      currentClimbing[i].cycle();\n      updatedClimbers.push(currentClimbing[i]);\n    } //remove finsihed climber from array\n\n\n    updatedClimbers.splice(finishedIndex, 1);\n    return updatedClimbers;\n  }\n\n  function cycleClimbers(nextClimber) {\n    //store current arrays\n    const currentOnDeck = onDeck;\n    const currentClimbing = climbing; //move on deck to climbing\n\n    currentOnDeck.map(climber => {\n      if (climber.getStartedClimbing == false) {\n        climber.setStartedClimbing();\n      }\n    });\n    setClimbing(currentOnDeck => [...currentOnDeck]); //move current climbers to ondeck\n\n    if (nextClimber) {\n      setOnDeck([nextClimber]);\n    } // const updatedClimbers = updateClimbers(currentClimbing)\n    // setOnDeck(onDeck => [...updatedClimbers, onDeck])\n\n  }\n\n  function getNextClimber() {\n    let currentIso = inIso;\n    const nextClimber = currentIso.shift();\n    setInIso(currentIso);\n    return nextClimber;\n  }\n\n  function startRound() {\n    roundStarted.current = new Boolean(true);\n    setInIso([...athletes]);\n  }\n\n  function toggle() {\n    if (!isActive) {\n      if (roundStarted.current == undefined) {\n        startRound();\n      }\n    }\n\n    setIsActive(!isActive);\n  }\n\n  function timerReset() {\n    setMinutes(1);\n    setSeconds(0);\n    setCycles(cycles => cycles + 1);\n  } //timer control\n\n\n  useEffect(() => {\n    if (isActive) {\n      if (seconds == 0) {\n        if (minutes == 0) {\n          timerReset();\n        }\n\n        if (minutes > 0) {\n          setSeconds(10);\n          setMinutes(minutes - 1);\n        }\n      }\n\n      if (seconds > 0) {\n        setTimeout(() => setSeconds(seconds - 1), 1000);\n      }\n    }\n  }, [isActive, seconds, minutes]);\n  useEffect(() => {\n    let nextClimber = getNextClimber(); // cycleClimbers(nextClimber)\n  }, [cycles]);\n  return __jsx(\"div\", {\n    className: \"timer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, minutes, \" : \", seconds < 10 ? `0${seconds}` : seconds), __jsx(\"button\", {\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, isActive ? 'Stop timer' : 'Start timer'));\n};\n\nexport default Timer;","map":{"version":3,"sources":["/Users/sam/Desktop/timer/next/components/Timer.jsx"],"names":["useState","useEffect","useRef","useLocalState","Timer","minutes","setMinutes","seconds","setSeconds","isActive","setIsActive","roundStarted","cycles","setCycles","athletes","inIso","setInIso","onDeck","setOnDeck","climbing","setClimbing","finished","setFinished","updateClimbers","currentClimbing","updatedClimbers","finishedIndex","i","length","getLastBoulder","finsihedIndex","cycle","push","splice","cycleClimbers","nextClimber","currentOnDeck","map","climber","getStartedClimbing","setStartedClimbing","getNextClimber","currentIso","shift","startRound","current","Boolean","toggle","undefined","timerReset","setTimeout"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from 'react'\nimport { useLocalState } from './LocalState'\n\nconst Timer = () => {\n\n    const [minutes, setMinutes] = useState(1)\n    const [seconds, setSeconds] = useState(0)\n    const [isActive, setIsActive] = useState(false)\n    const roundStarted = useRef()\n    const [cycles, setCycles] = useState(0)\n    const { athletes,\n            inIso, setInIso,\n            onDeck, setOnDeck,\n            climbing, setClimbing,\n            finished, setFinished,   \n    } = useLocalState()\n\n    //updates climbers after they are done climbing 1 boulder\n    function updateClimbers(currentClimbing) {\n        const updatedClimbers = []\n        let finishedIndex = 0;\n        for(let i = 0; i < currentClimbing.length; i++) {\n            if(currentClimbing[i].getLastBoulder() == true) {\n                setFinished(finished => [...finished, currentClimbing[i]])\n                finsihedIndex = i\n            }  \n            //update the boulders climbed value\n            currentClimbing[i].cycle()\n            updatedClimbers.push(currentClimbing[i])\n        }\n        //remove finsihed climber from array\n        updatedClimbers.splice(finishedIndex, 1)\n        return updatedClimbers\n    }\n    \n    function cycleClimbers (nextClimber) {\n        //store current arrays\n        const currentOnDeck = onDeck;\n        const currentClimbing = climbing;\n        //move on deck to climbing\n        currentOnDeck.map((climber) => {\n            if(climber.getStartedClimbing == false) {\n                climber.setStartedClimbing()\n            }\n        })\n        setClimbing(currentOnDeck => [...currentOnDeck])\n        //move current climbers to ondeck\n        if(nextClimber) {\n            setOnDeck([nextClimber])\n        }\n        // const updatedClimbers = updateClimbers(currentClimbing)\n        // setOnDeck(onDeck => [...updatedClimbers, onDeck])\n    }\n\n    function getNextClimber() {\n        let currentIso = inIso\n        const nextClimber = currentIso.shift()\n        setInIso(currentIso)\n        return nextClimber\n    }\n    \n    \n    function startRound() {\n        roundStarted.current = new Boolean(true);\n        setInIso([...athletes])\n    }\n    \n    function toggle() {\n        if(!isActive) {\n            if(roundStarted.current == undefined) {\n                startRound()\n            }\n        }\n        setIsActive(!isActive)\n    }\n    \n    function timerReset() {\n        setMinutes(1)\n        setSeconds(0)\n        setCycles(cycles => cycles + 1)\n    }\n    \n    //timer control\n    useEffect(() => {\n        if(isActive) {\n            if(seconds == 0) {\n                if(minutes == 0) {\n                    timerReset()\n                }\n                if(minutes > 0) {\n                    setSeconds(10)\n                    setMinutes(minutes - 1)\n                }\n            }\n            if(seconds > 0) {\n                setTimeout(() => setSeconds(seconds - 1), 1000)\n            }\n        }\n    }, [isActive, seconds, minutes])\n    \n    useEffect(() => {\n        let nextClimber = getNextClimber()\n        // cycleClimbers(nextClimber)\n    }, [cycles])\n\n    return (\n        <div className='timer'>\n        <h1>{minutes} : {seconds < 10 ? `0${seconds}` : seconds}</h1>\n        <button onClick={toggle}>{isActive ? 'Stop timer' : 'Start timer'}</button>\n    </div>\n    )\n}\n\nexport default Timer"]},"metadata":{},"sourceType":"module"}