{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/sam/Desktop/timer/next/pages/timer/[title].js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport getRound from '../../src/rounds';\n\nvar TimerPage = function TimerPage() {\n  _s();\n\n  var router = useRouter();\n  var title = router.query.title;\n  var round = getRound(title);\n  console.log(round); // if(round) {\n  //     var [minutes, setMinutes] = useState(round.data.activeTime)\n  // }\n\n  var _useState = useState(0),\n      seconds = _useState[0],\n      setSeconds = _useState[1];\n\n  var _useState2 = useState(false),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1];\n\n  function toggle() {\n    setIsActive(!isActive);\n  }\n\n  function reset() {\n    setMinutes(round.data.activeTime);\n    setSeconds(0);\n    setIsActive(false);\n  }\n\n  useEffect(function () {\n    var interval = null;\n\n    if (isActive) {\n      interval = setInterval(function () {\n        if (seconds > 0) {\n          setSeconds(function (seconds) {\n            return seconds - 1;\n          });\n        }\n\n        if (seconds == 0) {\n          if (minutes == 0) {\n            reset();\n          }\n        }\n      }, 1000);\n    }\n  }, [isActive, seconds, minutes]);\n  return __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, minutes, \" : \", seconds < 10 ? \"0\".concat(seconds) : seconds), __jsx(\"button\", {\n    onClick: toggle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, isActive ? 'Stop' : 'Start'));\n};\n\n_s(TimerPage, \"RSnqcRhSf6D4PEhARs5bdHShzhQ=\", false, function () {\n  return [useRouter];\n});\n\n_c = TimerPage;\nexport default TimerPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimerPage\");","map":{"version":3,"sources":["/Users/sam/Desktop/timer/next/pages/timer/[title].js"],"names":["useState","useEffect","useRouter","getRound","TimerPage","router","title","query","round","console","log","seconds","setSeconds","isActive","setIsActive","toggle","reset","setMinutes","data","activeTime","interval","setInterval","minutes"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,QAAP,MAAqB,kBAArB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AACpB,MAAMC,MAAM,GAAGH,SAAS,EAAxB;AADoB,MAEZI,KAFY,GAEFD,MAAM,CAACE,KAFL,CAEZD,KAFY;AAGpB,MAAME,KAAK,GAAGL,QAAQ,CAACG,KAAD,CAAtB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAJoB,CAKpB;AACA;AACA;;AAPoB,kBAQUR,QAAQ,CAAC,CAAD,CARlB;AAAA,MAQbW,OARa;AAAA,MAQJC,UARI;;AAAA,mBASYZ,QAAQ,CAAC,KAAD,CATpB;AAAA,MASba,QATa;AAAA,MASHC,WATG;;AAWpB,WAASC,MAAT,GAAkB;AACdD,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACH;;AAED,WAASG,KAAT,GAAiB;AACbC,IAAAA,UAAU,CAACT,KAAK,CAACU,IAAN,CAAWC,UAAZ,CAAV;AACAP,IAAAA,UAAU,CAAC,CAAD,CAAV;AACAE,IAAAA,WAAW,CAAC,KAAD,CAAX;AACH;;AAEDb,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAImB,QAAQ,GAAG,IAAf;;AACA,QAAGP,QAAH,EAAa;AACTO,MAAAA,QAAQ,GAAGC,WAAW,CAAC,YAAM;AACzB,YAAGV,OAAO,GAAG,CAAb,EAAgB;AACZC,UAAAA,UAAU,CAAC,UAAAD,OAAO;AAAA,mBAAIA,OAAO,GAAG,CAAd;AAAA,WAAR,CAAV;AACH;;AAED,YAAGA,OAAO,IAAI,CAAd,EAAiB;AACb,cAAGW,OAAO,IAAI,CAAd,EAAiB;AACbN,YAAAA,KAAK;AACR;AACJ;AACJ,OAVqB,EAUnB,IAVmB,CAAtB;AAWH;AAEJ,GAhBQ,EAgBN,CAACH,QAAD,EAAWF,OAAX,EAAoBW,OAApB,CAhBM,CAAT;AAkBA,SACI,4BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,OAAL,SAAiBX,OAAO,GAAG,EAAV,cAAmBA,OAAnB,IAA+BA,OAAhD,CADA,EAEA;AAAQ,IAAA,OAAO,EAAEI,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BF,QAAQ,GAAG,MAAH,GAAY,OAA9C,CAFA,CADJ;AAMH,CA7CD;;GAAMT,S;UACaF,S;;;KADbE,S;AA+CN,eAAeA,SAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport getRound from '../../src/rounds'\n\nconst TimerPage = () => {\n    const router = useRouter()\n    const { title } = router.query\n    const round = getRound(title)\n    console.log(round)\n    // if(round) {\n    //     var [minutes, setMinutes] = useState(round.data.activeTime)\n    // }\n    const [seconds, setSeconds] = useState(0)\n    const [isActive, setIsActive] = useState(false)\n\n    function toggle() {\n        setIsActive(!isActive)\n    }\n\n    function reset() {\n        setMinutes(round.data.activeTime)\n        setSeconds(0)\n        setIsActive(false)\n    }\n\n    useEffect(() => {\n        let interval = null\n        if(isActive) {\n            interval = setInterval(() => {\n                if(seconds > 0) {\n                    setSeconds(seconds => seconds - 1)\n                }\n\n                if(seconds == 0) {\n                    if(minutes == 0) {\n                        reset()\n                    }\n                }\n            }, 1000)\n        }\n\n    }, [isActive, seconds, minutes])\n\n    return (\n        <>\n        <h1>{minutes} : {seconds < 10 ? `0${seconds}` : seconds}</h1>\n        <button onClick={toggle}>{isActive ? 'Stop' : 'Start'}</button>\n        </>\n    )\n}\n\nexport default TimerPage"]},"metadata":{},"sourceType":"module"}