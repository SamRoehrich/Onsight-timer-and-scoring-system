{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Desktop/timer/next/components/Scoring.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useLocalState } from './LocalState';\nimport ScoreCard from \"./ScoreCard\";\n\nconst Scoring = ({\n  activeClimbers\n}) => {\n  let athletes = [];\n  const {\n    roundInformation\n  } = useLocalState();\n  const test = roundInformation.athletes.map((athlete, idx) => {\n    if (activeClimbers[idx] !== undefined) {\n      athletes.push(athlete);\n    }\n  });\n  console.log(athletes);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, __jsx(ScoreCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Scoring; //get index of active athlete from timer page and render scorecard for each athlete based on that index","map":{"version":3,"sources":["/Users/sam/Desktop/timer/next/components/Scoring.jsx"],"names":["useLocalState","ScoreCard","Scoring","activeClimbers","athletes","roundInformation","test","map","athlete","idx","undefined","push","console","log"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,cAA9B;AAEA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAwB;AAEpC,MAAIC,QAAQ,GAAG,EAAf;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAuBL,aAAa,EAA1C;AACA,QAAMM,IAAI,GAAGD,gBAAgB,CAACD,QAAjB,CAA0BG,GAA1B,CAA8B,CAACC,OAAD,EAAUC,GAAV,KAAkB;AAAC,QAAGN,cAAc,CAACM,GAAD,CAAd,KAAwBC,SAA3B,EAAqC;AAACN,MAAAA,QAAQ,CAACO,IAAT,CAAcH,OAAd;AAAuB;AAAC,GAA/G,CAAb;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CAbD;;AAeA,eAAeF,OAAf,C,CAEA","sourcesContent":["import { useLocalState } from './LocalState'\n\nimport ScoreCard from \"./ScoreCard\"\n\nconst Scoring = ({ activeClimbers }) => {\n\n    let athletes = []\n    const { roundInformation } = useLocalState()\n    const test = roundInformation.athletes.map((athlete, idx) => {if(activeClimbers[idx] !== undefined){athletes.push(athlete)}})\n    \n    console.log(athletes)\n    \n    return(\n        <div>\n            <ScoreCard/>\n        </div>\n    )\n}\n\nexport default Scoring\n\n//get index of active athlete from timer page and render scorecard for each athlete based on that index"]},"metadata":{},"sourceType":"module"}