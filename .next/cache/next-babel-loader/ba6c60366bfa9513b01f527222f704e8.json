{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/sam/Desktop/timer/next/components/Timer.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { useLocalState } from './LocalState';\n\nvar Timer = function Timer() {\n  _s();\n\n  var _useState = useState(1),\n      minutes = _useState[0],\n      setMinutes = _useState[1];\n\n  var _useState2 = useState(0),\n      seconds = _useState2[0],\n      setSeconds = _useState2[1];\n\n  var _useState3 = useState(false),\n      isActive = _useState3[0],\n      setIsActive = _useState3[1];\n\n  var _useLocalState = useLocalState(),\n      athletes = _useLocalState.athletes,\n      inIso = _useLocalState.inIso,\n      setInIso = _useLocalState.setInIso,\n      onDeck = _useLocalState.onDeck,\n      setOnDeck = _useLocalState.setOnDeck,\n      climbing = _useLocalState.climbing,\n      setClimbing = _useLocalState.setClimbing,\n      finished = _useLocalState.finished,\n      setFinished = _useLocalState.setFinished,\n      nextIndex = _useLocalState.nextIndex,\n      setNextIndex = _useLocalState.setNextIndex; //updates climbers after they are done climbing 1 boulder\n\n\n  function updateClimbers(currentClimbing) {\n    var updatedClimbers = [];\n    var finishedIndex = 0;\n\n    var _loop = function _loop(i) {\n      if (currentClimbing[i].getLastBoulder() == true) {\n        setFinished(function (finished) {\n          return [].concat(_toConsumableArray(finished), [currentClimbing[i]]);\n        });\n        finsihedIndex = i;\n      } //update the boulders climbed value\n\n\n      currentClimbing[i].cycle();\n      updatedClimbers.push(currentClimbing[i]);\n    };\n\n    for (var i = 0; i < currentClimbing.length; i++) {\n      _loop(i);\n    } //remove finsihed climber from array\n\n\n    updatedClimbers.splice(finishedIndex, 1);\n    return updatedClimbers;\n  }\n\n  function getNextClimber() {\n    return _getNextClimber.apply(this, arguments);\n  }\n\n  function _getNextClimber() {\n    _getNextClimber = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var currentIso, nextClimber, updatedIso;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              currentIso = inIso;\n              nextClimber = currentIso[nextIndex];\n              updatedIso = currentIso.splice(nextIndex, 1);\n              setInIso.apply(void 0, _toConsumableArray(updatedIso));\n              setNextIndex(function (nextIndex) {\n                return nextIndex + 1;\n              });\n              return _context.abrupt(\"return\", nextClimber);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _getNextClimber.apply(this, arguments);\n  }\n\n  function addClimberToOnDeck() {\n    var nextOnDeck = getNextClimber();\n    setOnDeck(function (onDeck) {\n      return [].concat(_toConsumableArray(onDeck), [nextOnDeck]);\n    });\n  }\n\n  function moveOnDeckToClimbing(next) {\n    setClimbing(next);\n  }\n\n  function moveClimbingToOnDeck(updatedClimbers) {\n    if (updatedClimbers.length == 0) return;\n    setOnDeck(updatedClimbers);\n  }\n\n  function cycleClimbers() {\n    //store current arrays\n    var currentOnDeck = onDeck;\n    var currentClimbing = climbing; //reset state\n\n    setOnDeck(null);\n    setClimbing(null); //move on deck to climbing\n\n    moveOnDeckToClimbing(currentOnDeck); //move current climbers to ondeck\n\n    var updatedClimbers = updateClimbers(currentClimbing);\n    moveClimbingToOnDeck(updatedClimbers);\n    addClimberToOnDeck();\n    timerReset();\n  } // function roundCycle () {\n  //     setClimbing(null)\n  //     setClimbing([...currentOnDeck])\n  //     currentClimbing.forEach(climber => {\n  //         climber.cycle()\n  //         if(climber.getLastBoulder() == true) {\n  //             setFinished([...finished, climber])\n  //         }\n  //         else {\n  //             setOnDeck([...onDeck, climber])\n  //         }\n  //     })\n  //     setOnDeck([...onDeck, inIso[nextIndex]])\n  //     setNextIndex(nextIndex + 1)\n  // }\n\n\n  function startRound() {\n    setInIso(athletes);\n    addClimberToOnDeck();\n  }\n\n  function toggle() {\n    if (!isActive) {\n      startRound();\n    }\n\n    setIsActive(!isActive);\n  }\n\n  function timerReset() {\n    setMinutes(1);\n    setSeconds(0);\n  } //timer control\n\n\n  useEffect(function () {\n    if (isActive) {\n      if (seconds == 0) {\n        if (minutes == 0) {\n          cycleClimbers();\n        }\n\n        if (minutes > 0) {\n          setSeconds(10);\n          setMinutes(minutes - 1);\n        }\n      }\n\n      if (seconds > 0) {\n        setTimeout(function () {\n          return setSeconds(seconds - 1);\n        }, 1000);\n      }\n    }\n  }, [isActive, seconds, minutes]);\n  return __jsx(\"div\", {\n    className: \"timer\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, minutes, \" : \", seconds < 10 ? \"0\".concat(seconds) : seconds), __jsx(\"button\", {\n    onClick: toggle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, isActive ? 'Stop' : 'Start'));\n};\n\n_s(Timer, \"ZPLFOEZzd1cA+OtiNyKQo+NlQBM=\", false, function () {\n  return [useLocalState];\n});\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/Users/sam/Desktop/timer/next/components/Timer.jsx"],"names":["useState","useEffect","useLocalState","Timer","minutes","setMinutes","seconds","setSeconds","isActive","setIsActive","athletes","inIso","setInIso","onDeck","setOnDeck","climbing","setClimbing","finished","setFinished","nextIndex","setNextIndex","updateClimbers","currentClimbing","updatedClimbers","finishedIndex","i","getLastBoulder","finsihedIndex","cycle","push","length","splice","getNextClimber","currentIso","nextClimber","updatedIso","addClimberToOnDeck","nextOnDeck","moveOnDeckToClimbing","next","moveClimbingToOnDeck","cycleClimbers","currentOnDeck","timerReset","startRound","toggle","setTimeout"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { useLocalState } from './LocalState'\n\nconst Timer = () => {\n\n    const [minutes, setMinutes] = useState(1)\n    const [seconds, setSeconds] = useState(0)\n    const [isActive, setIsActive] = useState(false)\n    const { athletes,\n            inIso, setInIso,\n            onDeck, setOnDeck,\n            climbing, setClimbing,\n            finished, setFinished,\n            nextIndex, setNextIndex    \n    } = useLocalState()\n\n    //updates climbers after they are done climbing 1 boulder\n    function updateClimbers(currentClimbing) {\n        const updatedClimbers = []\n        let finishedIndex = 0;\n        for(let i = 0; i < currentClimbing.length; i++) {\n            if(currentClimbing[i].getLastBoulder() == true) {\n                setFinished(finished => [...finished, currentClimbing[i]])\n                finsihedIndex = i\n            }  \n            //update the boulders climbed value\n            currentClimbing[i].cycle()\n            updatedClimbers.push(currentClimbing[i])\n        }\n        //remove finsihed climber from array\n        updatedClimbers.splice(finishedIndex, 1)\n        return updatedClimbers\n    }\n\n    async function getNextClimber() {\n        const currentIso = inIso\n        const nextClimber = currentIso[nextIndex]\n        const updatedIso = currentIso.splice(nextIndex, 1)\n        setInIso(...updatedIso)\n        setNextIndex(nextIndex => nextIndex + 1)\n        return nextClimber\n    }\n\n    function addClimberToOnDeck() {\n        const nextOnDeck = getNextClimber()\n        setOnDeck(onDeck => [...onDeck, nextOnDeck])\n    }\n\n    function moveOnDeckToClimbing(next) {\n        setClimbing(next)\n    }\n\n    function moveClimbingToOnDeck(updatedClimbers) {\n        if(updatedClimbers.length == 0) return\n        setOnDeck(updatedClimbers)\n    }\n    \n    function cycleClimbers () {\n        //store current arrays\n        const currentOnDeck = onDeck;\n        const currentClimbing = climbing;\n        //reset state\n        setOnDeck(null)\n        setClimbing(null)\n        //move on deck to climbing\n        moveOnDeckToClimbing(currentOnDeck)\n        //move current climbers to ondeck\n        const updatedClimbers = updateClimbers(currentClimbing)\n        moveClimbingToOnDeck(updatedClimbers)\n        addClimberToOnDeck()\n        timerReset()\n    }\n\n    // function roundCycle () {\n        \n    //     setClimbing(null)\n    //     setClimbing([...currentOnDeck])\n    //     currentClimbing.forEach(climber => {\n    //         climber.cycle()\n    //         if(climber.getLastBoulder() == true) {\n    //             setFinished([...finished, climber])\n    //         }\n    //         else {\n    //             setOnDeck([...onDeck, climber])\n    //         }\n    //     })\n    //     setOnDeck([...onDeck, inIso[nextIndex]])\n    //     setNextIndex(nextIndex + 1)\n    // }\n\n    function startRound() {\n        setInIso(athletes)\n        addClimberToOnDeck()\n    }\n\n    function toggle() {\n        if(!isActive) {\n            startRound()\n        }\n        setIsActive(!isActive)\n    }\n\n    function timerReset() {\n        setMinutes(1)\n        setSeconds(0)\n    }\n\n    //timer control\n    useEffect(() => {\n        if(isActive) {\n            if(seconds == 0) {\n                if(minutes == 0) {\n                    cycleClimbers()\n                }\n                if(minutes > 0) {\n                    setSeconds(10)\n                    setMinutes(minutes - 1)\n                }\n            }\n            if(seconds > 0) {\n                setTimeout(() => setSeconds(seconds - 1), 1000)\n            }\n        }\n    }, [isActive, seconds, minutes])\n\n    return (\n    <div className='timer'>\n        <h1>{minutes} : {seconds < 10 ? `0${seconds}` : seconds}</h1>\n        <button onClick={toggle}>{isActive ? 'Stop' : 'Start'}</button>\n    </div>\n    )\n}\n\nexport default Timer"]},"metadata":{},"sourceType":"module"}