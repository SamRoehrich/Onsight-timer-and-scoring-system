{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/sam/Desktop/timer/next/components/Scoring.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useLocalState } from './LocalState';\nimport ScoreCard from \"./ScoreCard\";\n\nvar Scoring = function Scoring(_ref) {\n  _s();\n\n  var activeClimbers = _ref.activeClimbers;\n  var athletes = [];\n\n  var _useLocalState = useLocalState(),\n      roundInformation = _useLocalState.roundInformation;\n\n  roundInformation.athletes.map(function (athlete, idx) {\n    if (activeClimbers[idx] !== undefined) {\n      athletes.push(athlete);\n    }\n  });\n  console.log(athletes);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, __jsx(ScoreCard, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }));\n};\n\n_s(Scoring, \"yTRKCalA+0RToLkLlem1LDX4vMc=\", false, function () {\n  return [useLocalState];\n});\n\n_c = Scoring;\nexport default Scoring; //get index of active athlete from timer page and render scorecard for each athlete based on that index\n\nvar _c;\n\n$RefreshReg$(_c, \"Scoring\");","map":{"version":3,"sources":["/Users/sam/Desktop/timer/next/components/Scoring.jsx"],"names":["useLocalState","ScoreCard","Scoring","activeClimbers","athletes","roundInformation","map","athlete","idx","undefined","push","console","log"],"mappings":";;;;;;AAAA,SAASA,aAAT,QAA8B,cAA9B;AAEA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAwB;AAAA;;AAAA,MAArBC,cAAqB,QAArBA,cAAqB;AAEpC,MAAIC,QAAQ,GAAG,EAAf;;AAFoC,uBAGPJ,aAAa,EAHN;AAAA,MAG5BK,gBAH4B,kBAG5BA,gBAH4B;;AAIpCA,EAAAA,gBAAgB,CAACD,QAAjB,CAA0BE,GAA1B,CAA8B,UAACC,OAAD,EAAUC,GAAV,EAAkB;AAAC,QAAGL,cAAc,CAACK,GAAD,CAAd,KAAwBC,SAA3B,EAAqC;AAACL,MAAAA,QAAQ,CAACM,IAAT,CAAcH,OAAd;AAAuB;AAAC,GAA/G;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAYR,QAAZ;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CAbD;;GAAMF,O;UAG2BF,a;;;KAH3BE,O;AAeN,eAAeA,OAAf,C,CAEA","sourcesContent":["import { useLocalState } from './LocalState'\n\nimport ScoreCard from \"./ScoreCard\"\n\nconst Scoring = ({ activeClimbers }) => {\n\n    let athletes = []\n    const { roundInformation } = useLocalState()\n    roundInformation.athletes.map((athlete, idx) => {if(activeClimbers[idx] !== undefined){athletes.push(athlete)}})\n    \n    console.log(athletes)\n    \n    return(\n        <div>\n            <ScoreCard/>\n        </div>\n    )\n}\n\nexport default Scoring\n\n//get index of active athlete from timer page and render scorecard for each athlete based on that index"]},"metadata":{},"sourceType":"module"}