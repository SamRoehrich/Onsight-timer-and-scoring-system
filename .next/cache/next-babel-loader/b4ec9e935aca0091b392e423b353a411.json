{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar rounds = [{\n  title: '3BoulderOnsight',\n  data: {\n    numBoulders: 3,\n    activeTime: 4,\n    restTime: 4\n  }\n}, {\n  title: '4BoulderOnsight',\n  data: {\n    numBoulders: 4,\n    activeTime: 4,\n    restTime: 4\n  }\n}, {\n  title: '5BoulderOnsight',\n  data: {\n    numBoulders: 5,\n    activeTime: 4,\n    restTime: 4\n  }\n}, {\n  title: '6BoulderOnsight',\n  data: {\n    numBoulders: 6,\n    activeTime: 4,\n    restTime: 4\n  }\n}];\nexport default function getRound(_x) {\n  return _getRound.apply(this, arguments);\n}\n\nfunction _getRound() {\n  _getRound = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(title) {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            rounds.find(function (round) {\n              if (round.title == title) {\n                res = round;\n              }\n            });\n            return _context.abrupt(\"return\", res);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getRound.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/sam/Desktop/timer/next/src/rounds.js"],"names":["rounds","title","data","numBoulders","activeTime","restTime","getRound","find","round","res"],"mappings":";;AAAA,IAAMA,MAAM,GAAG,CACX;AACIC,EAAAA,KAAK,EAAE,iBADX;AAEIC,EAAAA,IAAI,EAAE;AACFC,IAAAA,WAAW,EAAE,CADX;AAEFC,IAAAA,UAAU,EAAE,CAFV;AAGFC,IAAAA,QAAQ,EAAE;AAHR;AAFV,CADW,EASX;AACIJ,EAAAA,KAAK,EAAE,iBADX;AAEIC,EAAAA,IAAI,EAAE;AACFC,IAAAA,WAAW,EAAE,CADX;AAEFC,IAAAA,UAAU,EAAE,CAFV;AAGFC,IAAAA,QAAQ,EAAE;AAHR;AAFV,CATW,EAiBX;AACIJ,EAAAA,KAAK,EAAE,iBADX;AAEIC,EAAAA,IAAI,EAAE;AACFC,IAAAA,WAAW,EAAE,CADX;AAEFC,IAAAA,UAAU,EAAE,CAFV;AAGFC,IAAAA,QAAQ,EAAE;AAHR;AAFV,CAjBW,EAyBX;AACIJ,EAAAA,KAAK,EAAE,iBADX;AAEIC,EAAAA,IAAI,EAAE;AACFC,IAAAA,WAAW,EAAE,CADX;AAEFC,IAAAA,UAAU,EAAE,CAFV;AAGFC,IAAAA,QAAQ,EAAE;AAHR;AAFV,CAzBW,CAAf;AAmCA,wBAA8BC,QAA9B;AAAA;AAAA;;;uEAAe,iBAAwBL,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEXD,YAAAA,MAAM,CAACO,IAAP,CAAY,UAAAC,KAAK,EAAI;AAClB,kBAAGA,KAAK,CAACP,KAAN,IAAeA,KAAlB,EAAyB;AACrBQ,gBAAAA,GAAG,GAAGD,KAAN;AACH;AACH,aAJD;AAFW,6CAOJC,GAPI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["const rounds = [\n    {\n        title: '3BoulderOnsight',\n        data: {\n            numBoulders: 3,\n            activeTime: 4,\n            restTime: 4,\n        },\n    },\n    {\n        title: '4BoulderOnsight',\n        data: {\n            numBoulders: 4,\n            activeTime: 4,\n            restTime: 4,\n        },\n    },\n    {\n        title: '5BoulderOnsight',\n        data: {\n            numBoulders: 5,\n            activeTime: 4,\n            restTime: 4,\n        },\n    },\n    {\n        title: '6BoulderOnsight',\n        data: {\n            numBoulders: 6,\n            activeTime: 4,\n            restTime: 4,\n        },\n    }\n]\n\nexport default async function getRound(title) {\n    var res\n    rounds.find(round => {\n       if(round.title == title) {\n           res = round\n       }\n    })\n    return res\n}\n"]},"metadata":{},"sourceType":"module"}