{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Desktop/timer/next/pages/timer/[title].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport getRound from '../../src/rounds';\n\nconst TimerPage = () => {\n  const router = useRouter();\n  const {\n    title\n  } = router.query;\n  const round = getRound(title);\n  const {\n    data\n  } = round;\n  const {\n    activeTime\n  } = round;\n  const {\n    0: minutes,\n    1: setMinutes\n  } = useState(activeTime);\n  const {\n    0: seconds,\n    1: setSeconds\n  } = useState(0);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n\n  function toggle() {\n    setIsActive(!isActive);\n  }\n\n  function reset() {\n    setMinutes(round.data.activeTime);\n    setSeconds(0);\n    setIsActive(false);\n  }\n\n  useEffect(() => {\n    let interval = null;\n\n    if (isActive) {\n      interval = setInterval(() => {\n        if (seconds > 0) {\n          setSeconds(seconds => seconds - 1);\n        }\n\n        if (seconds == 0) {\n          if (minutes == 0) {\n            reset();\n          }\n        }\n      }, 1000);\n    }\n  }, [isActive, seconds, minutes]);\n  return __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, minutes, \" : \", seconds < 10 ? `0${seconds}` : seconds), __jsx(\"button\", {\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, isActive ? 'Stop' : 'Start'));\n};\n\nexport default TimerPage;","map":{"version":3,"sources":["/Users/sam/Desktop/timer/next/pages/timer/[title].js"],"names":["useState","useEffect","useRouter","getRound","TimerPage","router","title","query","round","data","activeTime","minutes","setMinutes","seconds","setSeconds","isActive","setIsActive","toggle","reset","interval","setInterval"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,QAAP,MAAqB,kBAArB;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACpB,QAAMC,MAAM,GAAGH,SAAS,EAAxB;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAYD,MAAM,CAACE,KAAzB;AACA,QAAMC,KAAK,GAAGL,QAAQ,CAACG,KAAD,CAAtB;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAWD,KAAjB;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAiBF,KAAvB;AACA,QAAM;AAAA,OAACG,OAAD;AAAA,OAAUC;AAAV,MAAwBZ,QAAQ,CAACU,UAAD,CAAtC;AACA,QAAM;AAAA,OAACG,OAAD;AAAA,OAAUC;AAAV,MAAwBd,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM;AAAA,OAACe,QAAD;AAAA,OAAWC;AAAX,MAA0BhB,QAAQ,CAAC,KAAD,CAAxC;;AAEA,WAASiB,MAAT,GAAkB;AACdD,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACH;;AAED,WAASG,KAAT,GAAiB;AACbN,IAAAA,UAAU,CAACJ,KAAK,CAACC,IAAN,CAAWC,UAAZ,CAAV;AACAI,IAAAA,UAAU,CAAC,CAAD,CAAV;AACAE,IAAAA,WAAW,CAAC,KAAD,CAAX;AACH;;AAEDf,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIkB,QAAQ,GAAG,IAAf;;AACA,QAAGJ,QAAH,EAAa;AACTI,MAAAA,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACzB,YAAGP,OAAO,GAAG,CAAb,EAAgB;AACZC,UAAAA,UAAU,CAACD,OAAO,IAAIA,OAAO,GAAG,CAAtB,CAAV;AACH;;AAED,YAAGA,OAAO,IAAI,CAAd,EAAiB;AACb,cAAGF,OAAO,IAAI,CAAd,EAAiB;AACbO,YAAAA,KAAK;AACR;AACJ;AACJ,OAVqB,EAUnB,IAVmB,CAAtB;AAWH;AAEJ,GAhBQ,EAgBN,CAACH,QAAD,EAAWF,OAAX,EAAoBF,OAApB,CAhBM,CAAT;AAkBA,SACI,4BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,OAAL,SAAiBE,OAAO,GAAG,EAAV,GAAgB,IAAGA,OAAQ,EAA3B,GAA+BA,OAAhD,CADA,EAEA;AAAQ,IAAA,OAAO,EAAEI,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BF,QAAQ,GAAG,MAAH,GAAY,OAA9C,CAFA,CADJ;AAMH,CA5CD;;AA8CA,eAAeX,SAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport getRound from '../../src/rounds'\n\nconst TimerPage = () => {\n    const router = useRouter()\n    const { title } = router.query\n    const round = getRound(title)\n    const { data } = round\n    const { activeTime } = round\n    const [minutes, setMinutes] = useState(activeTime)\n    const [seconds, setSeconds] = useState(0)\n    const [isActive, setIsActive] = useState(false)\n\n    function toggle() {\n        setIsActive(!isActive)\n    }\n\n    function reset() {\n        setMinutes(round.data.activeTime)\n        setSeconds(0)\n        setIsActive(false)\n    }\n\n    useEffect(() => {\n        let interval = null\n        if(isActive) {\n            interval = setInterval(() => {\n                if(seconds > 0) {\n                    setSeconds(seconds => seconds - 1)\n                }\n\n                if(seconds == 0) {\n                    if(minutes == 0) {\n                        reset()\n                    }\n                }\n            }, 1000)\n        }\n\n    }, [isActive, seconds, minutes])\n\n    return (\n        <>\n        <h1>{minutes} : {seconds < 10 ? `0${seconds}` : seconds}</h1>\n        <button onClick={toggle}>{isActive ? 'Stop' : 'Start'}</button>\n        </>\n    )\n}\n\nexport default TimerPage"]},"metadata":{},"sourceType":"module"}