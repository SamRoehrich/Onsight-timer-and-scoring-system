{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Desktop/timer/next/components/Scoring.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useLocalState } from './LocalState';\nimport ScoreCard from \"./ScoreCard\";\n\nconst Scoring = ({\n  activeClimbers\n}) => {\n  const {\n    roundInformation: round\n  } = useLocalState();\n  console.log(round.round.roundStarted);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, activeClimbers.map(athlete => __jsx(ScoreCard, {\n    athlete: athlete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 47\n    }\n  })));\n};\n\nexport default Scoring; //get index of active athlete from timer page and render scorecard for each athlete based on that index","map":{"version":3,"sources":["/Users/sam/Desktop/timer/next/components/Scoring.jsx"],"names":["useLocalState","ScoreCard","Scoring","activeClimbers","roundInformation","round","console","log","roundStarted","map","athlete"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,cAA9B;AAEA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAwB;AAEpC,QAAM;AAAEC,IAAAA,gBAAgB,EAAEC;AAApB,MAA8BL,aAAa,EAAjD;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACA,KAAN,CAAYG,YAAxB;AACA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQL,cAAc,CAACM,GAAf,CAAmBC,OAAO,IAAI,MAAC,SAAD;AAAW,IAAA,OAAO,EAAEA,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA9B,CAFR,CADJ;AAOH,CAXD;;AAaA,eAAeR,OAAf,C,CAEA","sourcesContent":["import { useLocalState } from './LocalState'\n\nimport ScoreCard from \"./ScoreCard\"\n\nconst Scoring = ({ activeClimbers }) => {\n\n    const { roundInformation: round } = useLocalState()\n    console.log(round.round.roundStarted)\n    return(\n        <div>\n            {\n                activeClimbers.map(athlete => <ScoreCard athlete={athlete} />)\n            }\n        </div>\n    )\n}\n\nexport default Scoring\n\n//get index of active athlete from timer page and render scorecard for each athlete based on that index"]},"metadata":{},"sourceType":"module"}