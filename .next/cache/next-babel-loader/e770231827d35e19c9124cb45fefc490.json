{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Desktop/timer/next/components/Timer.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { useLocalState } from './LocalState';\n\nconst Timer = () => {\n  const {\n    0: minutes,\n    1: setMinutes\n  } = useState(1);\n  const {\n    0: seconds,\n    1: setSeconds\n  } = useState(0);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    athletes,\n    inIso,\n    setInIso,\n    onDeck,\n    setOnDeck,\n    climbing,\n    setClimbing,\n    finished,\n    setFinished,\n    nextIndex,\n    setNextIndex\n  } = useLocalState(); //updates climbers after they are done climbing 1 boulder\n\n  function updateClimbers(currentClimbing) {\n    const updatedClimbers = [];\n    let finishedIndex = 0;\n\n    for (let i = 0; i < currentClimbing.length; i++) {\n      if (currentClimbing[i].getLastBoulder() == true) {\n        setFinished(finished => [...finished, currentClimbing[i]]);\n        finsihedIndex = i;\n      } //update the boulders climbed value\n\n\n      currentClimbing[i].cycle();\n      updatedClimbers.push(currentClimbing[i]);\n    } //remove finsihed climber from array\n\n\n    updatedClimbers.splice(finishedIndex, 1);\n    return updatedClimbers;\n  }\n\n  async function getNextClimber() {\n    const currentIso = inIso;\n    const nextClimber = currentIso[nextIndex];\n    const updatedIso = currentIso.splice(nextIndex, 1);\n    setInIso(...updatedIso);\n    setNextIndex(nextIndex => nextIndex + 1);\n    return nextClimber;\n  }\n\n  async function addClimberToOnDeck() {\n    const nextOnDeck = await getNextClimber();\n    setOnDeck(onDeck => [...onDeck, nextOnDeck]);\n  }\n\n  function moveOnDeckToClimbing(next) {\n    setClimbing(next);\n  }\n\n  function moveClimbingToOnDeck(updatedClimbers) {\n    if (updatedClimbers.length == 0) return;\n    setOnDeck(updatedClimbers);\n  }\n\n  function cycleClimbers() {\n    //store current arrays\n    const currentOnDeck = onDeck;\n    const currentClimbing = climbing; //reset state\n\n    setOnDeck(null);\n    setClimbing(null); //move on deck to climbing\n\n    moveOnDeckToClimbing(currentOnDeck); //move current climbers to ondeck\n\n    const updatedClimbers = updateClimbers(currentClimbing);\n    moveClimbingToOnDeck(updatedClimbers);\n    addClimberToOnDeck();\n    timerReset();\n  } // function roundCycle () {\n  //     setClimbing(null)\n  //     setClimbing([...currentOnDeck])\n  //     currentClimbing.forEach(climber => {\n  //         climber.cycle()\n  //         if(climber.getLastBoulder() == true) {\n  //             setFinished([...finished, climber])\n  //         }\n  //         else {\n  //             setOnDeck([...onDeck, climber])\n  //         }\n  //     })\n  //     setOnDeck([...onDeck, inIso[nextIndex]])\n  //     setNextIndex(nextIndex + 1)\n  // }\n\n\n  function startRound() {\n    setInIso(...athletes);\n    addClimberToOnDeck();\n  }\n\n  function toggle() {\n    if (!isActive) {\n      startRound();\n    }\n\n    setIsActive(!isActive);\n  }\n\n  function timerReset() {\n    setMinutes(1);\n    setSeconds(0);\n  } //timer control\n\n\n  useEffect(() => {\n    if (isActive) {\n      if (seconds == 0) {\n        if (minutes == 0) {\n          cycleClimbers();\n        }\n\n        if (minutes > 0) {\n          setSeconds(10);\n          setMinutes(minutes - 1);\n        }\n      }\n\n      if (seconds > 0) {\n        setTimeout(() => setSeconds(seconds - 1), 1000);\n      }\n    }\n  }, [isActive, seconds, minutes]);\n  return __jsx(\"div\", {\n    className: \"timer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, minutes, \" : \", seconds < 10 ? `0${seconds}` : seconds), __jsx(\"button\", {\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, isActive ? 'Stop' : 'Start'));\n};\n\nexport default Timer;","map":{"version":3,"sources":["/Users/sam/Desktop/timer/next/components/Timer.jsx"],"names":["useState","useEffect","useLocalState","Timer","minutes","setMinutes","seconds","setSeconds","isActive","setIsActive","athletes","inIso","setInIso","onDeck","setOnDeck","climbing","setClimbing","finished","setFinished","nextIndex","setNextIndex","updateClimbers","currentClimbing","updatedClimbers","finishedIndex","i","length","getLastBoulder","finsihedIndex","cycle","push","splice","getNextClimber","currentIso","nextClimber","updatedIso","addClimberToOnDeck","nextOnDeck","moveOnDeckToClimbing","next","moveClimbingToOnDeck","cycleClimbers","currentOnDeck","timerReset","startRound","toggle","setTimeout"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { useLocalState } from './LocalState'\n\nconst Timer = () => {\n\n    const [minutes, setMinutes] = useState(1)\n    const [seconds, setSeconds] = useState(0)\n    const [isActive, setIsActive] = useState(false)\n    const { athletes,\n            inIso, setInIso,\n            onDeck, setOnDeck,\n            climbing, setClimbing,\n            finished, setFinished,\n            nextIndex, setNextIndex    \n    } = useLocalState()\n\n    //updates climbers after they are done climbing 1 boulder\n    function updateClimbers(currentClimbing) {\n        const updatedClimbers = []\n        let finishedIndex = 0;\n        for(let i = 0; i < currentClimbing.length; i++) {\n            if(currentClimbing[i].getLastBoulder() == true) {\n                setFinished(finished => [...finished, currentClimbing[i]])\n                finsihedIndex = i\n            }  \n            //update the boulders climbed value\n            currentClimbing[i].cycle()\n            updatedClimbers.push(currentClimbing[i])\n        }\n        //remove finsihed climber from array\n        updatedClimbers.splice(finishedIndex, 1)\n        return updatedClimbers\n    }\n\n    async function getNextClimber() {\n        const currentIso = inIso\n        const nextClimber = currentIso[nextIndex]\n        const updatedIso = currentIso.splice(nextIndex, 1)\n        setInIso(...updatedIso)\n        setNextIndex(nextIndex => nextIndex + 1)\n        return nextClimber\n    }\n\n    async function addClimberToOnDeck() {\n        const nextOnDeck = await getNextClimber()\n        setOnDeck(onDeck => [...onDeck, nextOnDeck])\n    }\n\n    function moveOnDeckToClimbing(next) {\n        setClimbing(next)\n    }\n\n    function moveClimbingToOnDeck(updatedClimbers) {\n        if(updatedClimbers.length == 0) return\n        setOnDeck(updatedClimbers)\n    }\n    \n    function cycleClimbers () {\n        //store current arrays\n        const currentOnDeck = onDeck;\n        const currentClimbing = climbing;\n        //reset state\n        setOnDeck(null)\n        setClimbing(null)\n        //move on deck to climbing\n        moveOnDeckToClimbing(currentOnDeck)\n        //move current climbers to ondeck\n        const updatedClimbers = updateClimbers(currentClimbing)\n        moveClimbingToOnDeck(updatedClimbers)\n        addClimberToOnDeck()\n        timerReset()\n    }\n\n    // function roundCycle () {\n        \n    //     setClimbing(null)\n    //     setClimbing([...currentOnDeck])\n    //     currentClimbing.forEach(climber => {\n    //         climber.cycle()\n    //         if(climber.getLastBoulder() == true) {\n    //             setFinished([...finished, climber])\n    //         }\n    //         else {\n    //             setOnDeck([...onDeck, climber])\n    //         }\n    //     })\n    //     setOnDeck([...onDeck, inIso[nextIndex]])\n    //     setNextIndex(nextIndex + 1)\n    // }\n\n    function startRound() {\n        setInIso(...athletes)\n        addClimberToOnDeck()\n    }\n\n    function toggle() {\n        if(!isActive) {\n            startRound()\n        }\n        setIsActive(!isActive)\n    }\n\n    function timerReset() {\n        setMinutes(1)\n        setSeconds(0)\n    }\n\n    //timer control\n    useEffect(() => {\n        if(isActive) {\n            if(seconds == 0) {\n                if(minutes == 0) {\n                    cycleClimbers()\n                }\n                if(minutes > 0) {\n                    setSeconds(10)\n                    setMinutes(minutes - 1)\n                }\n            }\n            if(seconds > 0) {\n                setTimeout(() => setSeconds(seconds - 1), 1000)\n            }\n        }\n    }, [isActive, seconds, minutes])\n\n    return (\n    <div className='timer'>\n        <h1>{minutes} : {seconds < 10 ? `0${seconds}` : seconds}</h1>\n        <button onClick={toggle}>{isActive ? 'Stop' : 'Start'}</button>\n    </div>\n    )\n}\n\nexport default Timer"]},"metadata":{},"sourceType":"module"}