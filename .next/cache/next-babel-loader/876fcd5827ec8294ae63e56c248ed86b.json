{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/sam/Desktop/timer/next/pages/timer.js\",\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\n\nvar TimerPage = function TimerPage() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  function toggle() {\n    setIsActive(!isActive);\n  }\n\n  function reset() {\n    setMinutes(round.data.activeTime);\n    setSeconds(0);\n    setIsActive(false);\n  }\n\n  useEffect(_s(function () {\n    _s();\n\n    var interval = null;\n\n    var _useState = useState(round ? round.data.activeTime : 4),\n        minutes = _useState[0],\n        setMinutes = _useState[1];\n\n    var _useState2 = useState(0),\n        seconds = _useState2[0],\n        setSeconds = _useState2[1];\n\n    var _useState3 = useState(false),\n        isActive = _useState3[0],\n        setIsActive = _useState3[1];\n\n    if (isActive) {\n      interval = setInterval(function () {\n        if (seconds > 0) {\n          setSeconds(function (seconds) {\n            return seconds - 1;\n          });\n        }\n\n        if (seconds == 0) {\n          if (minutes == 0) {\n            reset();\n          }\n        }\n      }, 1000);\n    }\n  }, \"NQ0q/tOMr4iCFtgkZSjXExvHc4M=\"), [isActive, seconds, minutes]);\n  return __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, minutes, \" : \", seconds < 10 ? \"0\".concat(seconds) : seconds), __jsx(\"button\", {\n    onClick: toggle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, isActive ? 'Stop' : 'Start'));\n};\n\n_s2(TimerPage, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = TimerPage;\nexport default TimerPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimerPage\");","map":{"version":3,"sources":["/Users/sam/Desktop/timer/next/pages/timer.js"],"names":["useState","useEffect","TimerPage","toggle","setIsActive","isActive","reset","setMinutes","round","data","activeTime","setSeconds","interval","minutes","seconds","setInterval"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AAAA;;AAEpB,WAASC,MAAT,GAAkB;AACdC,IAAAA,WAAW,CAAC,CAACC,QAAF,CAAX;AACH;;AAED,WAASC,KAAT,GAAiB;AACbC,IAAAA,UAAU,CAACC,KAAK,CAACC,IAAN,CAAWC,UAAZ,CAAV;AACAC,IAAAA,UAAU,CAAC,CAAD,CAAV;AACAP,IAAAA,WAAW,CAAC,KAAD,CAAX;AACH;;AAEDH,EAAAA,SAAS,IAAC,YAAM;AAAA;;AACZ,QAAIW,QAAQ,GAAG,IAAf;;AADY,oBAEkBZ,QAAQ,CAACQ,KAAK,GAAGA,KAAK,CAACC,IAAN,CAAWC,UAAd,GAA2B,CAAjC,CAF1B;AAAA,QAELG,OAFK;AAAA,QAEIN,UAFJ;;AAAA,qBAGkBP,QAAQ,CAAC,CAAD,CAH1B;AAAA,QAGLc,OAHK;AAAA,QAGIH,UAHJ;;AAAA,qBAIoBX,QAAQ,CAAC,KAAD,CAJ5B;AAAA,QAILK,QAJK;AAAA,QAIKD,WAJL;;AAKZ,QAAGC,QAAH,EAAa;AACTO,MAAAA,QAAQ,GAAGG,WAAW,CAAC,YAAM;AACzB,YAAGD,OAAO,GAAG,CAAb,EAAgB;AACZH,UAAAA,UAAU,CAAC,UAAAG,OAAO;AAAA,mBAAIA,OAAO,GAAG,CAAd;AAAA,WAAR,CAAV;AACH;;AAED,YAAGA,OAAO,IAAI,CAAd,EAAiB;AACb,cAAGD,OAAO,IAAI,CAAd,EAAiB;AACbP,YAAAA,KAAK;AACR;AACJ;AACJ,OAVqB,EAUnB,IAVmB,CAAtB;AAWH;AAEJ,GAnBQ,mCAmBN,CAACD,QAAD,EAAWS,OAAX,EAAoBD,OAApB,CAnBM,CAAT;AAqBA,SACI,4BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,OAAL,SAAiBC,OAAO,GAAG,EAAV,cAAmBA,OAAnB,IAA+BA,OAAhD,CADA,EAEA;AAAQ,IAAA,OAAO,EAAEX,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BE,QAAQ,GAAG,MAAH,GAAY,OAA9C,CAFA,CADJ;AAMH,CAvCD;;IAAMH,S;;KAAAA,S;AAyCN,eAAeA,SAAf","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst TimerPage = () => {\n    \n    function toggle() {\n        setIsActive(!isActive)\n    }\n    \n    function reset() {\n        setMinutes(round.data.activeTime)\n        setSeconds(0)\n        setIsActive(false)\n    }\n    \n    useEffect(() => {\n        let interval = null\n        const [minutes, setMinutes] = useState(round ? round.data.activeTime : 4)\n        const [seconds, setSeconds] = useState(0)\n        const [isActive, setIsActive] = useState(false)\n        if(isActive) {\n            interval = setInterval(() => {\n                if(seconds > 0) {\n                    setSeconds(seconds => seconds - 1)\n                }\n\n                if(seconds == 0) {\n                    if(minutes == 0) {\n                        reset()\n                    }\n                }\n            }, 1000)\n        }\n\n    }, [isActive, seconds, minutes])\n\n    return (\n        <>\n        <h1>{minutes} : {seconds < 10 ? `0${seconds}` : seconds}</h1>\n        <button onClick={toggle}>{isActive ? 'Stop' : 'Start'}</button>\n        </>\n    )\n}\n\nexport default TimerPage"]},"metadata":{},"sourceType":"module"}