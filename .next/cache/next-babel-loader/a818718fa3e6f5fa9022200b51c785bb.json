{"ast":null,"code":"export default function Round(athletes) {\n  this.athletes = athletes;\n  this.activeTime = 4;\n  this.restTime = 4;\n  this.stacks = [];\n  this.numBoulders = 4;\n  this.onDeck = [];\n  this.inIso = [];\n  this.climbing = [];\n  this.finished = [];\n  this.roundStarted = false;\n  this.athletesLeft = athletes.length;\n}\n\nRound.prototype.startRound = function () {\n  this.roundStarted = true;\n  this.inIso.push(...this.athletes);\n  this.onDeck.push(this.athletes[0]);\n  this.inIso.shift();\n};\n\nRound.prototype.cycle = function () {\n  let tempClimbing = []; //check if an athlete is done, remove from climbing arr and push to finished arr\n\n  this.climbing.map((athlete, i) => {\n    if (athlete.lastBoulder == true) {\n      this.finished.push(athlete);\n      this.climbing.splice(i, 1);\n    }\n  }); //store on deck in temp arr\n\n  tempClimbing.push(...this.onDeck); //push climbing arr to ondeck\n\n  this.onDeck = [];\n  this.onDeck.push(...this.climbing);\n  this.climbing.push(...tempClimbing);\n};","map":{"version":3,"sources":["/Users/sam/Desktop/timer/next/src/Round.js"],"names":["Round","athletes","activeTime","restTime","stacks","numBoulders","onDeck","inIso","climbing","finished","roundStarted","athletesLeft","length","prototype","startRound","push","shift","cycle","tempClimbing","map","athlete","i","lastBoulder","splice"],"mappings":"AAAA,eAAe,SAASA,KAAT,CAAgBC,QAAhB,EAA0B;AACrC,OAAKA,QAAL,GAAgBA,QAAhB;AACA,OAAKC,UAAL,GAAkB,CAAlB;AACA,OAAKC,QAAL,GAAgB,CAAhB;AACA,OAAKC,MAAL,GAAc,EAAd;AACA,OAAKC,WAAL,GAAmB,CAAnB;AACA,OAAKC,MAAL,GAAc,EAAd;AACA,OAAKC,KAAL,GAAa,EAAb;AACA,OAAKC,QAAL,GAAgB,EAAhB;AACA,OAAKC,QAAL,GAAgB,EAAhB;AACA,OAAKC,YAAL,GAAoB,KAApB;AACA,OAAKC,YAAL,GAAoBV,QAAQ,CAACW,MAA7B;AACH;;AAEDZ,KAAK,CAACa,SAAN,CAAgBC,UAAhB,GAA6B,YAAY;AACrC,OAAKJ,YAAL,GAAoB,IAApB;AACA,OAAKH,KAAL,CAAWQ,IAAX,CAAgB,GAAG,KAAKd,QAAxB;AACA,OAAKK,MAAL,CAAYS,IAAZ,CAAiB,KAAKd,QAAL,CAAc,CAAd,CAAjB;AACA,OAAKM,KAAL,CAAWS,KAAX;AACH,CALD;;AAOAhB,KAAK,CAACa,SAAN,CAAgBI,KAAhB,GAAwB,YAAY;AAChC,MAAIC,YAAY,GAAG,EAAnB,CADgC,CAEhC;;AACA,OAAKV,QAAL,CAAcW,GAAd,CAAkB,CAACC,OAAD,EAAUC,CAAV,KAAgB;AAC9B,QAAGD,OAAO,CAACE,WAAR,IAAuB,IAA1B,EAAgC;AAC5B,WAAKb,QAAL,CAAcM,IAAd,CAAmBK,OAAnB;AACA,WAAKZ,QAAL,CAAce,MAAd,CAAqBF,CAArB,EAAwB,CAAxB;AACP;AAAC,GAJF,EAHgC,CAQhC;;AACAH,EAAAA,YAAY,CAACH,IAAb,CAAkB,GAAG,KAAKT,MAA1B,EATgC,CAUhC;;AACA,OAAKA,MAAL,GAAc,EAAd;AACA,OAAKA,MAAL,CAAYS,IAAZ,CAAiB,GAAG,KAAKP,QAAzB;AACA,OAAKA,QAAL,CAAcO,IAAd,CAAmB,GAAGG,YAAtB;AACH,CAdD","sourcesContent":["export default function Round (athletes) {\n    this.athletes = athletes;\n    this.activeTime = 4;\n    this.restTime = 4;\n    this.stacks = [];\n    this.numBoulders = 4;\n    this.onDeck = [];\n    this.inIso = [];\n    this.climbing = [];\n    this.finished = [];\n    this.roundStarted = false;\n    this.athletesLeft = athletes.length\n}\n\nRound.prototype.startRound = function () {\n    this.roundStarted = true;\n    this.inIso.push(...this.athletes)\n    this.onDeck.push(this.athletes[0])\n    this.inIso.shift()\n}\n\nRound.prototype.cycle = function () {\n    let tempClimbing = []\n    //check if an athlete is done, remove from climbing arr and push to finished arr\n    this.climbing.map((athlete, i) => {\n        if(athlete.lastBoulder == true) {\n            this.finished.push(athlete);\n            this.climbing.splice(i, 1)\n    }})\n    //store on deck in temp arr\n    tempClimbing.push(...this.onDeck)\n    //push climbing arr to ondeck\n    this.onDeck = []\n    this.onDeck.push(...this.climbing)\n    this.climbing.push(...tempClimbing)\n}"]},"metadata":{},"sourceType":"module"}