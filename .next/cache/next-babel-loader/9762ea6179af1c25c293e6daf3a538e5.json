{"ast":null,"code":"import _construct from \"@babel/runtime/helpers/esm/construct\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport Athlete from './Athlete';\n\nfunction Round(athletes) {\n  this.athletes = athletes;\n  this.activeTime = 4;\n  this.restTime = 4;\n  this.stacks = [];\n  this.numBoulders = 4;\n  this.onDeck = [];\n  this.inIso = [];\n  this.climbing = [];\n  this.finished = [];\n  this.roundStarted = false;\n  this.athletesLeft = athletes.length;\n}\n\n_c = Round;\n\nRound.prototype.startRound = function () {\n  var _this$inIso;\n\n  this.roundStarted = true;\n\n  (_this$inIso = this.inIso).push.apply(_this$inIso, _toConsumableArray(this.athletes));\n\n  var firstAthlete = this.athletes[0];\n  firstAthlete.start();\n  this.onDeck.push(firstAthlete);\n  this.inIso.shift();\n};\n\nRound.prototype.transition = function () {\n  var _this = this;\n\n  var tempClimbing = [this.climbing];\n  var tempOnDeck = [this.onDeck];\n  this.climbing = [];\n  this.onDeck = []; //check if an athlete is done, remove from climbing arr and push to finished arr\n\n  tempClimbing.map(function (athlete, i) {\n    if (athlete.lastBoulder == true) {\n      _this.finished.push(athlete);\n    }\n  });\n  tempOnDeck.map(function (athlete) {\n    athlete.cycle();\n\n    _this.climbing.push(athlete);\n  });\n  tempClimbing.map(function (athlete) {\n    athlete.cycle();\n\n    _this.onDeck.push(athlete);\n  });\n};\n\nvar athletes = [new Athlete('sam', 'jr'), new Athlete('jon', ' b')];\n\nvar round = _construct(Round, athletes);\n\nround.transition();\n\nvar _c;\n\n$RefreshReg$(_c, \"Round\");","map":{"version":3,"sources":["/Users/sam/Desktop/timer/next/src/Round.js"],"names":["Athlete","Round","athletes","activeTime","restTime","stacks","numBoulders","onDeck","inIso","climbing","finished","roundStarted","athletesLeft","length","prototype","startRound","push","firstAthlete","start","shift","transition","tempClimbing","tempOnDeck","map","athlete","i","lastBoulder","cycle","round"],"mappings":";;AAAA,OAAOA,OAAP,MAAoB,WAApB;;AACA,SAASC,KAAT,CAAgBC,QAAhB,EAA0B;AACtB,OAAKA,QAAL,GAAgBA,QAAhB;AACA,OAAKC,UAAL,GAAkB,CAAlB;AACA,OAAKC,QAAL,GAAgB,CAAhB;AACA,OAAKC,MAAL,GAAc,EAAd;AACA,OAAKC,WAAL,GAAmB,CAAnB;AACA,OAAKC,MAAL,GAAc,EAAd;AACA,OAAKC,KAAL,GAAa,EAAb;AACA,OAAKC,QAAL,GAAgB,EAAhB;AACA,OAAKC,QAAL,GAAgB,EAAhB;AACA,OAAKC,YAAL,GAAoB,KAApB;AACA,OAAKC,YAAL,GAAoBV,QAAQ,CAACW,MAA7B;AACH;;KAZQZ,K;;AAcTA,KAAK,CAACa,SAAN,CAAgBC,UAAhB,GAA6B,YAAY;AAAA;;AACrC,OAAKJ,YAAL,GAAoB,IAApB;;AACA,sBAAKH,KAAL,EAAWQ,IAAX,uCAAmB,KAAKd,QAAxB;;AACA,MAAIe,YAAY,GAAG,KAAKf,QAAL,CAAc,CAAd,CAAnB;AACAe,EAAAA,YAAY,CAACC,KAAb;AACA,OAAKX,MAAL,CAAYS,IAAZ,CAAiBC,YAAjB;AACA,OAAKT,KAAL,CAAWW,KAAX;AACH,CAPD;;AASAlB,KAAK,CAACa,SAAN,CAAgBM,UAAhB,GAA6B,YAAY;AAAA;;AACrC,MAAIC,YAAY,GAAG,CAAC,KAAKZ,QAAN,CAAnB;AACA,MAAIa,UAAU,GAAG,CAAC,KAAKf,MAAN,CAAjB;AACA,OAAKE,QAAL,GAAgB,EAAhB;AACA,OAAKF,MAAL,GAAc,EAAd,CAJqC,CAKrC;;AACAc,EAAAA,YAAY,CAACE,GAAb,CAAiB,UAACC,OAAD,EAAUC,CAAV,EAAgB;AAC7B,QAAGD,OAAO,CAACE,WAAR,IAAuB,IAA1B,EAAgC;AAC5B,MAAA,KAAI,CAAChB,QAAL,CAAcM,IAAd,CAAmBQ,OAAnB;AACP;AAAC,GAHF;AAIAF,EAAAA,UAAU,CAACC,GAAX,CAAe,UAAAC,OAAO,EAAI;AACtBA,IAAAA,OAAO,CAACG,KAAR;;AACA,IAAA,KAAI,CAAClB,QAAL,CAAcO,IAAd,CAAmBQ,OAAnB;AACH,GAHD;AAIAH,EAAAA,YAAY,CAACE,GAAb,CAAiB,UAAAC,OAAO,EAAI;AACxBA,IAAAA,OAAO,CAACG,KAAR;;AACA,IAAA,KAAI,CAACpB,MAAL,CAAYS,IAAZ,CAAiBQ,OAAjB;AACH,GAHD;AAIH,CAlBD;;AAoBA,IAAItB,QAAQ,GAAG,CACX,IAAIF,OAAJ,CAAY,KAAZ,EAAmB,IAAnB,CADW,EAEX,IAAIA,OAAJ,CAAY,KAAZ,EAAmB,IAAnB,CAFW,CAAf;;AAKA,IAAI4B,KAAK,cAAO3B,KAAP,EACFC,QADE,CAAT;;AAIA0B,KAAK,CAACR,UAAN","sourcesContent":["import Athlete from './Athlete'\nfunction Round (athletes) {\n    this.athletes = athletes;\n    this.activeTime = 4;\n    this.restTime = 4;\n    this.stacks = [];\n    this.numBoulders = 4;\n    this.onDeck = [];\n    this.inIso = [];\n    this.climbing = [];\n    this.finished = [];\n    this.roundStarted = false;\n    this.athletesLeft = athletes.length\n}\n\nRound.prototype.startRound = function () {\n    this.roundStarted = true;\n    this.inIso.push(...this.athletes)\n    let firstAthlete = this.athletes[0]\n    firstAthlete.start()\n    this.onDeck.push(firstAthlete)\n    this.inIso.shift()\n}\n\nRound.prototype.transition = function () {\n    let tempClimbing = [this.climbing]\n    let tempOnDeck = [this.onDeck]\n    this.climbing = []\n    this.onDeck = []\n    //check if an athlete is done, remove from climbing arr and push to finished arr\n    tempClimbing.map((athlete, i) => {\n        if(athlete.lastBoulder == true) {\n            this.finished.push(athlete);\n    }})\n    tempOnDeck.map(athlete => {\n        athlete.cycle()\n        this.climbing.push(athlete)\n    })\n    tempClimbing.map(athlete => {\n        athlete.cycle()\n        this.onDeck.push(athlete)\n    })\n}\n\nvar athletes = [\n    new Athlete('sam', 'jr'),\n    new Athlete('jon', ' b')\n]\n\nvar round = new Round(\n    ...athletes\n)\n\nround.transition()"]},"metadata":{},"sourceType":"module"}